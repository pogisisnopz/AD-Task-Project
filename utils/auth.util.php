<?php
declare(strict_types=1);

// Assumes session_start() already called in bootstrap.php
// Assumes $pdo is available globally from bootstrap.php

function isAuthenticated(): bool {
    $sessionId = session_id();
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    $requestUri = $_SERVER['REQUEST_URI'];
    
    error_log("🔍 [$scriptName] isAuthenticated() called - Session ID: $sessionId - URI: $requestUri");
    error_log("🔍 [$scriptName] Current session data: " . json_encode($_SESSION));
    
    // Check both authentication methods
    $hasUser = isset($_SESSION['user']);
    $hasSimpleAuth = isset($_SESSION['simple_auth']);
    
    error_log("🔍 [$scriptName] Has user session: " . ($hasUser ? 'YES' : 'NO'));
    error_log("🔍 [$scriptName] Has simple_auth: " . ($hasSimpleAuth ? 'YES' : 'NO'));
    
    $authenticated = $hasUser || $hasSimpleAuth;
    error_log("🔍 [$scriptName] Final authentication result: " . ($authenticated ? 'AUTHENTICATED' : 'NOT AUTHENTICATED'));
    
    return $authenticated;
}

function getAuthenticatedUser(): ?array {
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    error_log("🔍 [$scriptName] getAuthenticatedUser() called");
    
    if (isset($_SESSION['user'])) {
        error_log("🔍 [$scriptName] Returning user from \$_SESSION['user']");
        return $_SESSION['user'];
    }

    if (isset($_SESSION['simple_auth']) && isset($_SESSION['simple_user'])) {
        error_log("🔍 [$scriptName] Returning user from simple_auth bypass");
        $username = $_SESSION['simple_user'];
        $user = [
            'id' => 999, // Special ID for bypass users
            'username' => $username,
            'first_name' => $username === 'admin' ? 'Admin' : 'John',
            'last_name' => $username === 'admin' ? 'User' : 'Smith',
            'email' => $username === 'admin' ? 'admin@mechanicus.com' : 'john.smith@mechanicus.com',
            'role' => $username === 'admin' ? 'Tech-Dominus' : 'Tech-Priest'
        ];
        error_log("🔍 [$scriptName] Generated bypass user: " . json_encode($user));
        return $user;
    }

    error_log("🔍 [$scriptName] No authenticated user found - returning null");
    return null;
}

function requireLogin(): void {
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    error_log("🔒 [$scriptName] requireLogin() called");
    
    if (!isAuthenticated()) {
        error_log("🔒 [$scriptName] User not authenticated, redirecting to login");
        header('Location: ../index.php');
        exit;
    }
    
    error_log("🔒 [$scriptName] User is authenticated, continuing");
}

function logout(): void {
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    error_log("🚪 [$scriptName] Logging out user");
    error_log("🚪 [$scriptName] Session before logout: " . json_encode($_SESSION));
    
    unset($_SESSION['user'], $_SESSION['simple_auth'], $_SESSION['simple_user']);
    session_destroy();
    
    error_log("🚪 [$scriptName] Session destroyed");
}

function authenticate(string $username, string $password): bool {
    global $pdo;
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    
    error_log("🔐 [$scriptName] authenticate() called for user: $username");
    error_log("🔐 [$scriptName] Session before auth: " . json_encode($_SESSION));

    try {
        // Query the database for the user
        $stmt = $pdo->prepare("SELECT * FROM users WHERE username = :username");
        $stmt->bindParam(':username', $username, PDO::PARAM_STR);
        $stmt->execute();
        
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
      if ($user && password_verify($password, $user['password'])) { 
            // Store user data in session
            $_SESSION['user'] = [
                'id' => $user['id'] ?? 1,
                'username' => $user['username'],
                'first_name' => $user['first_name'],
                'last_name' => $user['last_name'],
                'email' => $user['email'] ?? $user['username'] . '@mechanicus.com',
                'role' => mapRoleToTitle($user['role'])
            ];
            
            error_log("✅ [$scriptName] AUTH SUCCESS for $username from database");
            error_log("✅ [$scriptName] Session after DB auth: " . json_encode($_SESSION));
            return true;
        }
        
        error_log("❌ [$scriptName] AUTH FAILED for $username - user not found or wrong password");
        return false;
        
    } catch (PDOException $e) {
        error_log("❌ [$scriptName] Database error during authentication: " . $e->getMessage());
        
        // Fallback to hardcoded credentials if database fails
        error_log("🔄 [$scriptName] Falling back to hardcoded credentials");
        return authenticateFallback($username, $password);
    }
}

function authenticateFallback(string $username, string $password): bool {
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    error_log("🔐 [$scriptName] authenticateFallback() called for: $username");

    $validCredentials = [
        'admin' => 'password',
        'john.smith' => 'p@ssW0rd1234',
        'jm' => '12345'
    ];

    if (isset($validCredentials[$username]) && $validCredentials[$username] === $password) {
        $_SESSION['user'] = [
            'id' => 1,
            'username' => $username,
            'first_name' => getFallbackFirstName($username),
            'last_name' => getFallbackLastName($username),
            'email' => $username . '@mechanicus.com',
            'role' => getFallbackRole($username)
        ];
        
        error_log("✅ [$scriptName] FALLBACK AUTH SUCCESS for $username");
        error_log("✅ [$scriptName] Session after fallback auth: " . json_encode($_SESSION));
        return true;
    }

    error_log("❌ [$scriptName] FALLBACK AUTH FAILED for $username");
    return false;
}

function setBypassAuth(string $username = 'admin'): bool {
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    error_log("🚀 [$scriptName] setBypassAuth() called for: $username");
    error_log("🚀 [$scriptName] Session before bypass: " . json_encode($_SESSION));
    
    $_SESSION['simple_auth'] = true;
    $_SESSION['simple_user'] = $username;
    
    // Also set the full user data immediately
    $_SESSION['user'] = [
        'id' => 999,
        'username' => $username,
        'first_name' => $username === 'admin' ? 'Admin' : 'John',
        'last_name' => $username === 'admin' ? 'User' : 'Smith',
        'email' => $username === 'admin' ? 'admin@mechanicus.com' : 'john.smith@mechanicus.com',
        'role' => $username === 'admin' ? 'Tech-Dominus' : 'Tech-Priest'
    ];
    
    error_log("✅ [$scriptName] Bypass auth set successfully");
    error_log("✅ [$scriptName] Session after bypass: " . json_encode($_SESSION));
    return true;
}

function getFallbackFirstName(string $username): string {
    $names = [
        'admin' => 'Admin',
        'john.smith' => 'John',
        'jm' => 'JM'
    ];
    return $names[$username] ?? ucfirst($username);
}

function getFallbackLastName(string $username): string {
    $names = [
        'admin' => 'User',
        'john.smith' => 'Smith',
        'jm' => 'Rivera'
    ];
    return $names[$username] ?? 'User';
}

function getFallbackRole(string $username): string {
    $roles = [
        'admin' => 'Tech-Dominus',
        'john.smith' => 'Tech-Priest',
        'jm' => 'Tech-Adept'
    ];
    return $roles[$username] ?? 'Tech-Priest';
}

function mapRoleToTitle(string $role): string {
    $roleMappings = [
        'admin' => 'Tech-Dominus',
        'designer' => 'Tech-Priest',
        'user' => 'Tech-Adept'
    ];
    return $roleMappings[$role] ?? 'Tech-Priest';
}

// Helper function to get user by username from database
function getUserByUsername(string $username): ?array {
    global $pdo;
    $scriptName = basename($_SERVER['SCRIPT_NAME']);
    
    try {
        $stmt = $pdo->prepare("SELECT * FROM project_users WHERE username = :username");
        $stmt->bindParam(':username', $username, PDO::PARAM_STR);
        $stmt->execute();
        
        return $stmt->fetch(PDO::FETCH_ASSOC) ?: null;
    } catch (PDOException $e) {
        error_log("❌ [$scriptName] Error fetching user: " . $e->getMessage());
        return null;
    }
}